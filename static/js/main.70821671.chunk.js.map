{"version":3,"sources":["website/navbar.js","website/footer.js","website/hero.js","website/info.js","website/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Footer","Hero","Info","Dummy","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAuBeA,G,KArBA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,YACb,qCACA,sCACA,sCACA,2CACA,+CAEF,yBAAKA,UAAU,YACb,yCAEF,yBAAKA,UAAU,YACb,mDACA,qCACA,gDACA,0CCbOC,EALA,WACb,OACE,+BCQWC,EATF,WACX,OACE,yBAAKF,UAAU,OACb,6CACA,mFCASG,EALF,WACX,OACE,+BCeWC,E,iLAXX,OACE,6BACE,6BAAK,kBAAC,EAAD,OACL,6BAAK,kBAAC,EAAD,OACL,6BAAK,kBAAC,EAAD,OACL,6BAAK,kBAAC,EAAD,Y,GAPOC,aCaLC,E,iLAVX,OACE,6BACE,kBAAC,EAAD,W,GALUD,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.70821671.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navitem1\">\r\n        <span>Buy</span>\r\n        <span>Rent</span>\r\n        <span>Sell</span>\r\n        <span>Home loan</span>\r\n        <span>Agent finder</span>\r\n      </div>\r\n      <div className=\"navitem2\">\r\n        <span>Zillow</span>\r\n      </div>\r\n      <div className=\"navitem3\">\r\n        <span>List or adversite</span>\r\n        <span>BuY</span>\r\n        <span>Sign or Log in</span>\r\n        <span>Help</span>\r\n      </div></div>\r\n  )\r\n}\r\nexport default Navbar;","import React from \"react\";\r\nconst Footer = () => {\r\n  return (\r\n    <div></div>\r\n  )\r\n}\r\nexport default Footer;","import React from \"react\";\r\nimport './style.css';\r\nconst Hero = () => {\r\n  return (\r\n    <div className=\"img\">\r\n      <p>Reimagine home</p>\r\n      <p>We’ll help you find a place you’ll love.</p >\r\n\r\n    </div >\r\n  )\r\n}\r\nexport default Hero;","import React from \"react\";\r\nconst Info = () => {\r\n  return (\r\n    <div></div>\r\n  )\r\n}\r\nexport default Info;","import React, { Component } from 'react';\r\nimport Navbar from './navbar'\r\nimport Footer from './footer'\r\nimport Hero from './hero'\r\nimport Info from './info'\r\nclass Dummy extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div><Navbar /></div>\r\n        <div><Hero /></div>\r\n        <div><Info /></div>\r\n        <div><Footer /></div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Dummy;","import React, { Component } from 'react';\n\n/*import News from './news';*/\nimport Dummy from './website'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Dummy />\n\n\n\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}